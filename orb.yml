version: 2.1
description: |
  Run your Cypress.io end-to-end browser tests without spending time configuring CircleCI.
  This orb can also record results on the Cypress Dashboard and load balance tests in parallel mode.
  If recording on the dashboard, set `CYPRESS_RECORD_KEY` as CI environment variable.

#
# See https://www.cypress.io/
#
# User workflows can use "Jobs" defined in this Orb
# Jobs can use "Commands" also defined in this Orb
# Commands run on "Executors" defined below to guarantee consistent environment
# with all dependencies installed correctly.

#
# environments (containers) for running jobs and commands
#
executors:
  default:
    description: Single Docker container with Cypress dependencies
    parameters:
      node:
        type: string
        default: "10"
        description: Version of Node 6/8/10 to use
    docker:
      - image: cypress/base:<< parameters.node >>

  # executors based on available Cypress docker images
  # see https://github.com/cypress-io/cypress-docker-images
  base-6:
    description: Single Docker container with Node 6 and Cypress dependencies
    docker:
      - image: cypress/base:6

  base-8:
    description: Single Docker container with Node 8 and Cypress dependencies
    docker:
      - image: cypress/base:8

  base-10:
    description: Single Docker container with Node 10 and Cypress dependencies
    docker:
      - image: cypress/base:10

  browsers-chrome69:
    description: Docker container with Node 10, Cypress dependencies and Chrome 69
    docker:
      - image: cypress/browsers:chrome69

#
# reusable commands
#
commands:
  hello:
    description: just a tiny command for checking if things work
    parameters:
      greeting:
        type: string
    steps:
      - run: echo "Cypress says, Hello <<parameters.greeting>>"

  #
  # individual "building blocks" commands
  #
  setup:
    parameters:
      build:
        description: Optional build command(s)
        type: steps
        default: []
    steps:
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ checksum "package.json" }}
      # it would be nice to vary this command based on presence of "package-lock.json"
      # and also allow using yarn or pnpm
      - run:
          name: "Npm CI"
          command: "npm ci"
      - run: npx cypress verify
      # save new cache folder if needed
      - save_cache:
          key: cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - steps: << parameters.build >>

  write_workspace:
    steps:
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - .cache/Cypress

  #
  # public user commands
  #

  # Install command
  install:
    description: |
      Install NPM dependencies using "npm ci" then optionally runs your build command
    parameters:
      build:
        type: steps
        default: []
        description: Custom build commands to run after install
    steps:
      - setup:
          build: << parameters.build >>
      - write_workspace

  # run Cypress E2E tests command
  e2e:
    description: Runs Cypress end-to-end tests
    parameters:
      record:
        type: boolean
        default: false
        description: Record results on Cypress Dashboard, see https://on.cypress.io/dashboard-service
      parallel:
        type: boolean
        default: false
        description: Test balancing using Cypress Dashboard, see https://on.cypress.io/parallelization
      group:
        type: string
        description: Give tests a group name for clarity
      start:
        type: steps
        default: []
        description: |
          Single server start command (should run in the background)
      browser:
        type: string
        default: ""
        description: |
          Browser to use to run end-to-end tests. Typically "electron" (default) or "chrome".
          See https://on.cypress.io/launching-browsers
      spec:
        type: string
        default: ""
        description: |
          Spec pattern to use to run only some test files
    steps:
      - attach_workspace:
          at: ~/
      - steps: << parameters.start >>
      - run:
          name: Run Cypress tests
          # GOOD EXAMPLE conditional text based on boolean parameter
          # --record is needed to pass many other arguments, like "--group" and "--parallel"
          command: |
            npx cypress run \
              <<# parameters.spec>> --spec '<<parameters.spec>>' <</ parameters.spec>> \
              <<# parameters.browser>> --browser <<parameters.browser>> <</ parameters.browser>> \
              <<# parameters.record >> --record \
                --group '<<parameters.group>>' \
                <<# parameters.parallel>> --parallel <</ parameters.parallel>> \
              <</ parameters.record>>

#
# jobs defined by the orb
#
jobs:
  hello:
    description: Dummy job for testing commands
    executor: default
    steps:
      - hello:
          greeting: "friend"

  # a single e2e test run that
  #   - checks out code
  #   - installs NPM dependencies
  #     * (optional) run custom build command
  #   - executes Cypress end-to-end tests
  #     * (optional) starts server in the background
  #     * (optional) records tests results on Cypress Dashboard:
  #       - (optional) splits tests across N machines
  #       - (optional) names tests with a group name
  run:
    description:
      A single complete job to run Cypress end-to-end tests in your project.
      If recording on the Dashboard, set CYPRESS_RECORD_KEY environment variable

    parameters:
      executor:
        type: executor
        default: cypress/base-10
        description: Cypress executor to use

      record:
        type: boolean
        default: false
        description: Record results on Cypress Dashboard, see https://on.cypress.io/dashboard-service

      # "parallel" parameter should be used with "parallelism" parameter
      parallel:
        type: boolean
        default: false
        description: |
          Use test balancing using Cypress Dashboard
          see https://on.cypress.io/parallelization

      parallelism:
        type: integer
        default: 1
        description: |
          Number of Circle machines to use for load balancing, min 1
          (requires "parallel" parameter set to true)

      group:
        type: string
        default: "default group"
        description: Test group name when recording on the dashboard

      build:
        type: string
        default: ""
        description: Custom build command to run after install

      start:
        type: string
        default: ""
        description: |
          Optional server start command to run in the background before running Cypress tests

      browser:
        type: string
        default: ""
        description: |
          Browser to use to run end-to-end tests. Typically "electron" (default) or "chrome".
          See https://on.cypress.io/launching-browsers

      spec:
        type: string
        default: ""
        description: |
          Spec pattern to use to run only some test files

    executor: <<parameters.executor>>
    parallelism: <<parameters.parallelism>>

    steps:
      - when:
          condition: << parameters.parallel >>
          # user wants to run in parallel mode
          # thus we assume the dependencies were installed as separate job
          steps:
          - run: echo "Assuming dependencies were installed using cypress/install job"

      - unless:
          condition: << parameters.parallel >>
          steps:
          - checkout
          - when:
              condition: << parameters.build >>
              steps:
                - install:
                    build:
                      - run: << parameters.build >>
          - unless:
              condition: << parameters.build >>
              steps:
                - install

      - when:
          condition: << parameters.start >>
          steps:
            - e2e:
                start:
                  - run:
                      name: Start
                      command: << parameters.start >>
                      background: true
                record: <<parameters.record>>
                parallel: <<parameters.parallel>>
                group: <<parameters.group>>
                browser: <<parameters.browser>>
                spec: <<parameters.spec>>
      - unless:
          condition: << parameters.start >>
          steps:
            - e2e:
                record: <<parameters.record>>
                parallel: <<parameters.parallel>>
                group: <<parameters.group>>
                browser: <<parameters.browser>>
                spec: <<parameters.spec>>

  # Install Job
  install:
    parameters:
      executor:
        type: executor
        default: cypress/base-10
        description: Cypress executor to use
      build:
        type: string
        default: ""
        description: Custom build command to run after install
    description: Checks out code, installs dependencies, attaches code to the workspace
    executor: <<parameters.executor>>
    steps:
      - checkout
      - when:
          condition: << parameters.build >>
          steps:
            - install:
                build:
                  - run: << parameters.build >>
      - unless:
          condition: << parameters.build >>
          steps:
            - install

#
# user examples showing how to use the above Cypress Orb
#
examples:
  simple:
    description: Runs all Cypress tests without recording results on the Dashboard
    usage:
      version: 2.1
      orbs:
        cypress: cypress-io/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/run

  recording:
    description: Runs all Cypress tests and records them on the Cypress Dashboard
    usage:
      version: 2.1
      orbs:
        cypress: cypress/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/run:
                record: true

  chrome:
    description: Runs tests using Chrome browser in custom executor (Cypress docker image)
    usage:
      version: 2.1
      orbs:
        cypress: cypress/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/run:
                executor: cypress/browsers-chrome69
                browser: chrome

  start-server:
    description: Starts server and then runs all Cypress tests
    usage:
      version: 2.1
      orbs:
        cypress: cypress-io/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/run:
                start: "npm start"

  parallel-on-2-machines:
    description: Runs all Cypress tests by load balancing them on two machines
    usage:
      version: 2.1
      orbs:
        cypress: cypress-io/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/install
            - cypress/run:
                requires:
                  - cypress/install
                record: true
                parallel: true
                parallelism: 2
                group: "2 machines"

  build-app:
    description: |
      Install dependencies and run custom build command on one machine.
      Then run on 3 machines tests in load balancing mode.
    usage:
      version: 2.1
      orbs:
        cypress: cypress-io/cypress@1.0.0
      workflows:
        build:
          jobs:
            - cypress/install:
                build: "npm run build" # custom build command
            - cypress/run:
                requires:
                  - cypress/install
                record: true
                parallel: true
                parallelism: 3
                group: "3x"
