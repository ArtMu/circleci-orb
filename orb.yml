version: 2.1
description: End-to-end testing with Cypress.io on CircleCI

#
# See https://www.cypress.io/
#
# User workflows can use "Jobs" defined in this Orb
# Jobs can use "Commands" also defined in this Orb
# Commands run on "Executors" defined below to guarantee consistent environment
# with all dependencies installed correctly.

#
# environments (containers) for running jobs and commands
#
executors:
  default:
    parameters:
      # in the future we can add Cypress version?
      node:
        type: string
        default: "10"
    docker:
      - image: cypress/base:<< parameters.node >>

#
# reusable commands
#
commands:
  hello:
    description: just a tiny command for checking if things work
    parameters:
      greeting:
        type: string
    steps:
      - run: echo "Cypress says, Hello <<parameters.greeting>>"

  install:
    description: Install NPM dependencies using "npm ci"
    steps:
      - restore_cache:
          keys:
            - cache-{{ .Branch }}-{{ checksum "package.json" }}
      # it would be nice to vary this command based on presence of "package-lock.json"
      # and also allow using yarn or pnpm
      - run:
          name: "Npm CI"
          command: "npm ci"
      - run: npx cypress verify
      # save new cache folder if needed
      - save_cache:
          key: cache-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/.npm
            - ~/.cache
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - .cache/Cypress

  e2e:
    description: Runs Cypress end-to-end tests
    parameters:
      record:
        type: boolean
        default: false
        description: Record results on Cypress Dashboard, see https://on.cypress.io/dashboard-service
      parallel:
        type: boolean
        default: false
        description: Test balancing using Cypress Dashboard, see https://on.cypress.io/parallelization
      group:
        type: string
        description: Give tests a group name for clarity
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run Cypress tests
          # GOOD EXAMPLE conditional text based on boolean parameter
          command: "npx cypress run <<# parameters.record >> --record --group '<<parameters.group>>' <</ parameters.record >> <<# parameters.parallel >> --parallel <</ parameters.parallel >>"

#
# jobs defined by the orb
#
jobs:
  hello:
    description: Dummy job for testing commands
    executor: default
    steps:
      - hello:
          greeting: "friend"

  # a single e2e test run that
  #   - checks out code
  #   - installs NPM dependencies
  #   - executes Cypress end-to-end tests
  #     * (optional) with Dashboard recording
  #     * (optional) in parallel mode (requires recording)
  #     * (optional) with named group on Dashboard (requires recording)
  run:
    description: A single complete job to run Cypress end-to-end tests in your project

    parameters:
      record:
        type: boolean
        default: false
        description: Record results on Cypress Dashboard, see https://on.cypress.io/dashboard-service

      # "parallel" parameter should be used with "parallelism" parameter
      parallel:
        type: boolean
        default: false
        description: Test balancing using Cypress Dashboard, see https://on.cypress.io/parallelization

      # parallelism:
      #   type: string
      #   default: "1"
      #   description: Number of Circle machines to use for load balancing (requires "parallel" parameter set to true)
      group:
        type: string
        default: "default group"
        description: Test group name when recording on the dashboard

    executor: default
    # cannot pass parallelism via a parameter yet
    # see https://github.com/CircleCI-Public/config-preview-sdk/issues/121
    # parallelism: <<parameters.parallelism>>
    steps:
      - checkout
      - install
      - e2e:
          record: <<parameters.record>>
          parallel: <<parameters.parallel>>
          group: <<parameters.group>>

#
# user examples showing how to use the above Cypress Orb
#
examples:
  simple:
    description: Runs all Cypress tests without recording results on the Dashboard
    usage:
      version: 2.1
      orbs:
        cypress: cypress/cypress@dev:0.0.1

      workflows:
        build:
          jobs:
            - cypress/run

  recording:
    description: Runs all Cypress tests and records them on the Cypress Dashboard
    usage:
      version: 2.1
      orbs:
        cypress: cypress/cypress@dev:0.0.1

      workflows:
        build:
          jobs:
            - cypress/run:
                record: true
